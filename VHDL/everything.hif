HIF003
--
-- Copyright (C) 1988-2001 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	clk_adj.vhd
	{
		clk_adj [] [U2043679.DLS,U7449008.DLS,U1147235.DLS];
	}
	motor_control2.vhd
	{
		motor_control2 [] [U1147235.DLS,U7449008.DLS,U2043679.DLS]
		{
			12 [] [];
		}
	}
	info_mux.vhd
	{
		info_mux [] [U1147235.DLS,U7449008.DLS,U2043679.DLS];
	}
	rx3.vhd
	{
		rx3 [] [U2043679.DLS,U7449008.DLS,U1147235.DLS];
	}
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			11 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=13,DEPTH=0] [result12,result11,result10,result9,result8,result7,result6,result5,result4,result3,result2,result1,result0,data12,data11,data10,data9,data8,data7,data6,data5,data4,data3,data2,data1,data0];
			5 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=1,DEPTH=0] [result0,data0];
			4 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=9,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,data7,data8,result0,result1,result2,result3,result4,result5,result6,result7,result8];
		}
	}
	addcore.tdf
	{
		addcore [USE_LPM_FOR_AHDL_OPERATORS,width,CONSTANT_CIN,CARRY_CHAIN,CARRY_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,addcore.inc]
		{
			10 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=13,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K] [result12,result11,result10,result9,result8,result7,result6,result5,result4,result3,result2,result1,result0,dataa12,dataa11,dataa10,dataa9,dataa8,dataa7,dataa6,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab12,datab11,datab10,datab9,datab8,datab7,datab6,datab5,datab4,datab3,datab2,datab1,datab0,cin];
			3 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=9,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,datab8,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,dataa8,result0,result1,result2,result3,result4,result5,result6,result7,result8];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY,STYLE] [aglobal.inc,altshift.inc,bypassff.inc,look_add.inc,addcore.inc,lpm_add_sub.inc]
		{
			9 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=13,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K,STYLE=NORMAL] [RESULT12,RESULT11,RESULT10,RESULT9,RESULT8,RESULT7,RESULT6,RESULT5,RESULT4,RESULT3,RESULT2,RESULT1,RESULT0,CIN,DATAB12,DATAB11,DATAB10,DATAB9,DATAB8,DATAB7,DATAB6,DATAB5,DATAB4,DATAB3,DATAB2,DATAB1,DATAB0,DATAA12,DATAA11,DATAA10,DATAA9,DATAA8,DATAA7,DATAA6,DATAA5,DATAA4,DATAA3,DATAA2,DATAA1,DATAA0];
			2 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=9,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX10K,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAA7,DATAA8,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,DATAB7,DATAB8,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4,RESULT5,RESULT6,RESULT7,RESULT8];
		}
	}
	motor_control1.vhd
	{
		motor_control1 [] [U1147235.DLS,U7449008.DLS,U2043679.DLS];
	}
	dc_pwm1.vhd
	{
		dc_pwm1 [] [U1147235.DLS,U7449008.DLS,U2043679.DLS]
		{
			6 [] [];
		}
	}
	servo_convert1.vhd
	{
		servo_convert1 [] [U1147235.DLS,U7449008.DLS,U2043679.DLS]
		{
			14 [] [];
		}
	}
	split_motor1.vhd
	{
		split_motor1 [] [U1147235.DLS,U7449008.DLS,U2043679.DLS];
	}
	dec_7seg1.vhd
	{
		dec_7seg1 [] [U2043679.DLS,U7449008.DLS,U1147235.DLS];
	}
	split_7seg1.vhd
	{
		split_7seg1 [] [U2043679.DLS,U7449008.DLS,U1147235.DLS];
	}
	rx1.vhd
	{
		rx1 [] [U1147235.DLS,U7449008.DLS,U2043679.DLS];
	}
	fdiv1.vhd
	{
		fdiv1 [] [U1147235.DLS,U7449008.DLS,U2043679.DLS]
		{
			1 [] [];
		}
	}
	motor_control.gdf
	{
		motor_control [] [];
	}
	servo_convert.gdf
	{
		servo_convert [] [];
	}
	rx2.vhd
	{
		rx2 [] [U1147235.DLS,U7449008.DLS,U2043679.DLS]
		{
			7 [] [];
		}
	}
	claw_convert.vhd
	{
		claw_convert [] [U1147235.DLS,U7449008.DLS,U2043679.DLS]
		{
			13 [] [];
		}
	}
	arm_convert.vhd
	{
		arm_convert [] [U1147235.DLS,U7449008.DLS,U2043679.DLS]
		{
			8 [] [];
		}
	}
	info_mux2.vhd
	{
		info_mux2 [] [U1147235.DLS,U7449008.DLS,U2043679.DLS]
		{
			15 [] [];
		}
	}
	everything.gdf
	{
		everything [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	everything::(0,0):(0): everything.gdf
	{
		servo_convert1::(0,0):(82): servo_convert1.vhd
		{
			lpm_add_sub:9:(28,25):(219): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(159,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(151,carry_ext_latency_ffs): altshift.tdf;
				altshift:11:(222,2):(119,result_ext_latency_ffs): altshift.tdf;
				addcore:10:(212,4):(73,adder): addcore.tdf;
			}
		}
		claw_convert::(0,0):(81): claw_convert.vhd
		{
			lpm_add_sub:9:(28,25):(217): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(159,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(151,carry_ext_latency_ffs): altshift.tdf;
				altshift:11:(222,2):(119,result_ext_latency_ffs): altshift.tdf;
				addcore:10:(212,4):(73,adder): addcore.tdf;
			}
		}
		dc_pwm1::(0,0):(80): dc_pwm1.vhd
		{
			lpm_add_sub:2:(20,25):(143): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(127,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(119,carry_ext_latency_ffs): altshift.tdf;
				altshift:4:(222,2):(95,result_ext_latency_ffs): altshift.tdf;
				addcore:3:(212,4):(61,adder): addcore.tdf;
			}
		}
		motor_control2::(0,0):(79): motor_control2.vhd;
		rx2::(0,0):(71): rx2.vhd
		{
			lpm_add_sub:2:(29,1):(377): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(127,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(119,carry_ext_latency_ffs): altshift.tdf;
				altshift:4:(222,2):(95,result_ext_latency_ffs): altshift.tdf;
				addcore:3:(212,4):(61,adder): addcore.tdf;
			}
		}
		dc_pwm1::(0,0):(57): dc_pwm1.vhd
		{
			lpm_add_sub:2:(20,25):(143): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(127,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(119,carry_ext_latency_ffs): altshift.tdf;
				altshift:4:(222,2):(95,result_ext_latency_ffs): altshift.tdf;
				addcore:3:(212,4):(61,adder): addcore.tdf;
			}
		}
		fdiv1::(0,0):(42): fdiv1.vhd
		{
			lpm_add_sub:2:(18,25):(109): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(127,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(119,carry_ext_latency_ffs): altshift.tdf;
				altshift:4:(222,2):(95,result_ext_latency_ffs): altshift.tdf;
				addcore:3:(212,4):(61,adder): addcore.tdf;
			}
		}
		arm_convert::(0,0):(77): arm_convert.vhd
		{
			lpm_add_sub:9:(28,25):(219): lpm_add_sub.tdf
			{
				altshift:5:(226,2):(159,oflow_ext_latency_ffs): altshift.tdf;
				altshift:5:(224,2):(151,carry_ext_latency_ffs): altshift.tdf;
				altshift:11:(222,2):(119,result_ext_latency_ffs): altshift.tdf;
				addcore:10:(212,4):(73,adder): addcore.tdf;
			}
		}
		info_mux2::(0,0):(88): info_mux2.vhd;
	}
}
